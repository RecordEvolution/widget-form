/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export type Title = string;
export type Subtitle = string;
/**
 * If checked, a button will be shown to open the form. If unchecked, the form will be shown directly.
 */
export type FormOpenButton = boolean;
export type Label = string;
export type FieldType = "dropdown" | "textfield" | "numberfield" | "checkbox" | "textarea" | "datetime";
/**
 * If false, this field will be hidden in the form but still saved on submit.
 */
export type HiddenField = boolean;
/**
 * This field must be filled out before the form can be submitted.
 */
export type Required = boolean;
/**
 * This text will be shown as a description at the field.
 */
export type HintText = string;
/**
 * This value will be used if the user does not provide a value.
 */
export type DefaultValue = string;
/**
 * Minimum value for number fields.
 */
export type MinimumValue = number;
/**
 * Maximum value for number fields.
 */
export type MaximumValue = number;
/**
 * Regular expression for validating text fields.
 */
export type ValidationRegex = string;
/**
 * Label shown in the dropdown.
 */
export type DisplayLabel = string;
/**
 * Value stored in the database.
 */
export type Value = string;
/**
 * List of values for the dropdown field.
 */
export type DropdownValues = {
  displayLabel?: DisplayLabel;
  value?: Value;
  [k: string]: unknown;
}[];
/**
 * Add fields and define how they should be stored.
 */
export type FormFields = {
  label?: Label;
  type?: FieldType;
  hiddenField?: HiddenField;
  required?: Required;
  description?: HintText;
  targetColumn?: TargetColumn;
  defaultValue?: DefaultValue;
  min?: MinimumValue;
  max?: MaximumValue;
  validation?: ValidationRegex;
  values?: DropdownValues;
  [k: string]: unknown;
}[];

export interface InputData {
  title?: Title;
  subTitle?: Subtitle;
  formButton?: FormOpenButton;
  formFields?: FormFields;
  [k: string]: unknown;
}
/**
 * The column in the target table where this field's data will be stored. This will be combined with all other fields in this form connected with the same target table.
 */
export interface TargetColumn {
  [k: string]: unknown;
}
